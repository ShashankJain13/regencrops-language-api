image: atlassian/default-image:4

definitions:
  steps:
  - step: &build-image-and-push-to-ecr
      name: Build and push image to ECR
      oidc: true
      script:
      # install aws cli
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.13.3.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install
      - export AWS_ROLE_ARN=$AWS_ROLE_ARN
      - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
      - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
      # Fetch the aws secrets and create .env file
      # App secrets
      - AWS_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "$AWS_SECRET_NAME" --region "$AWS_PRIMARY_REGION" --query 'SecretString' --output text)
      - if [ $? -ne 0 ]; then echo "Error fetching aws secret"; exit 1; fi
      - for key in $(echo "$AWS_SECRET_JSON" | jq -r 'keys[]'); do echo $key=$(echo "$AWS_SECRET_JSON" | jq -r ".$key") >> .env ; done
      # build the image
      - docker build -t $AWS_IMAGE_NAME:1.${BITBUCKET_BUILD_NUMBER} -t $AWS_IMAGE_NAME:latest .
      # delete .env file
      - rm .env
      # use the pipe to push the image to AWS ECR
      - pipe: atlassian/aws-ecr-push-image:2.4.0
        variables:
          AWS_DEFAULT_REGION: $AWS_REGION
          AWS_OIDC_ROLE_ARN: $AWS_ROLE_ARN
          IMAGE_NAME: $AWS_IMAGE_NAME
          TAGS: "1.${BITBUCKET_BUILD_NUMBER} latest"
      services:
      - "docker"
  - step: &Deploy-image-to-eks
      name: Deploy image to EKS
      oidc: true
      script:
      - echo "Starting the Deployment"
      - mkdir deployment
      - cp -a env/. deployment/
      - cp -a values/values_uat.yaml deployment/values.yaml
      - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.13.3.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install
      #- aws s3 ls
      - export AWS_ROLE_ARN=$AWS_ROLE_ARN
      - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
      - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
      #- apt-get update && apt-get install -y awscli
      - aws --version
      #- aws s3 ls
      - aws eks update-kubeconfig --region ap-south-1 --name $eks_cluster_name
      - helm list -n ns-regencrops > helm_list.txt
      - if grep -q $helm_chart_name helm_list.txt; then echo "The helm chart exists"; helm uninstall $helm_chart_name -n ns-regencrops; fi
      #- helm uninstall regencrops-api-lang -n ns-regencrops

      #- cd deployment
      - helm install $helm_chart_name deployment/ -n ns-regencrops
      - helm list -n ns-regencrops

  - step: &build-image-and-push-to-azure-acr
      name: Build and push image to Azure Container Registry
      oidc: true
      script:
      # install aws cli
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.13.3.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install
      - export AWS_ROLE_ARN=$AWS_ROLE_ARN
      - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
      - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
      # Fetch the aws secrets and create .env file
      # App secrets
      - AWS_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "$AWS_SECRET_NAME" --region "$AWS_PRIMARY_REGION" --query 'SecretString' --output text)
      - if [ $? -ne 0 ]; then echo "Error fetching aws secret"; exit 1; fi
      - for key in $(echo "$AWS_SECRET_JSON" | jq -r 'keys[]'); do echo $key=$(echo "$AWS_SECRET_JSON" | jq -r ".$key") >> .env ; done
      # build the image
      - docker build -t $AZURE_IMAGE_NAME:1.${BITBUCKET_BUILD_NUMBER} -t $AZURE_IMAGE_NAME:latest .
      # delete .env file
      - rm .env
      - pipe: atlassian/azure-acr-push-image:0.3.0
        variables:
          AZURE_TOKEN_NAME: $AZURE_TOKEN_NAME
          AZURE_TOKEN_PWD: $AZURE_TOKEN_PWD
          AZURE_REGISTRY: https://regencropslanguageapi.azurecr.io
          IMAGE_NAME: $AZURE_IMAGE_NAME
          TAGS: "1.${BITBUCKET_BUILD_NUMBER} latest"
      services:
      - "docker"

pipelines:
  branches:
    development:
    - stage:
        name: "Deploy to DEV"
        deployment: dev
        steps:
        - step:
            !!merge <<: *build-image-and-push-to-ecr
            name: DEV - Build and push image to ECR
        - step:
            !!merge <<: *build-image-and-push-to-azure-acr
            name: DEV - Build and push image to Azure Container Registry
    "{release/*,hotfix/*}":
    - stage:
        name: "Deploy to UAT"
        deployment: uat
        steps:
        - step:
            !!merge <<: *build-image-and-push-to-ecr
            name: UAT - Build and push image to ECR
        - step:
            !!merge <<: *Deploy-image-to-eks
            name: UAT - Deploy image to EKS
        - step:
            !!merge <<: *build-image-and-push-to-azure-acr
            name: UAT - Build and push image to Azure Container Registry
  custom:
    build-and-deploy-to-aws:
    - step:
        !!merge <<: *build-image-and-push-to-ecr
        name: DEV - Build and push image to ECR
        deployment: dev
    - step:
        !!merge <<: *build-image-and-push-to-ecr
        name: UAT - Build and push image to ECR
        deployment: uat
    # - step: *EKS-Deploymment
    build-and-deploy-to-azure:
    - step:
        !!merge <<: *build-image-and-push-to-azure-acr
        name: DEV - Build and push image to Azure Container Registry
        deployment: dev
    - step:
        !!merge <<: *build-image-and-push-to-azure-acr
        name: UAT - Build and push image to Azure Container Registry
        deployment: uat
